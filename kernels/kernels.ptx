//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	analysis_lower
.global .align 4 .u32 row_idx;
.global .align 4 .u32 stack_id;

.visible .entry analysis_lower(
	.param .u32 analysis_lower_param_0,
	.param .u64 analysis_lower_param_1,
	.param .u64 analysis_lower_param_2,
	.param .u64 analysis_lower_param_3,
	.param .u64 analysis_lower_param_4,
	.param .u64 analysis_lower_param_5
)
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<21>;
	.reg .b64 	%rd<24>;


	ld.param.u32 	%r9, [analysis_lower_param_0];
	ld.param.u64 	%rd7, [analysis_lower_param_1];
	ld.param.u64 	%rd10, [analysis_lower_param_2];
	ld.param.u64 	%rd11, [analysis_lower_param_3];
	ld.param.u64 	%rd8, [analysis_lower_param_4];
	ld.param.u64 	%rd9, [analysis_lower_param_5];
	cvta.to.global.u64 	%rd1, %rd10;
	cvta.to.global.u64 	%rd2, %rd11;
	mov.u64 	%rd12, row_idx;
	atom.global.add.u32 	%r1, [%rd12], 1;
	setp.ge.u32	%p1, %r1, %r9;
	@%p1 bra 	BB0_7;

	cvt.s64.s32	%rd3, %r1;
	cvta.to.global.u64 	%rd13, %rd8;
	mul.wide.s32 	%rd14, %r1, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r12, [%rd15+4];
	add.s32 	%r2, %r12, -1;
	ld.global.u32 	%r18, [%rd15];
	cvta.to.global.u64 	%rd4, %rd9;
	mov.u32 	%r20, 0;
	setp.ge.u32	%p2, %r18, %r2;
	@%p2 bra 	BB0_5;

BB0_2:
	mul.wide.u32 	%rd16, %r18, 4;
	add.s64 	%rd17, %rd4, %rd16;
	ld.global.u32 	%rd5, [%rd17];
	add.s64 	%rd6, %rd1, %rd5;

BB0_3:
	ld.volatile.global.u8 	%rs1, [%rd6];
	setp.eq.s16	%p3, %rs1, 0;
	@%p3 bra 	BB0_3;

	shl.b64 	%rd18, %rd5, 2;
	add.s64 	%rd19, %rd2, %rd18;
	ld.volatile.global.u32 	%r13, [%rd19];
	setp.gt.u32	%p4, %r20, %r13;
	add.s32 	%r14, %r13, 1;
	selp.b32	%r20, %r20, %r14, %p4;
	add.s32 	%r18, %r18, 1;
	setp.lt.u32	%p5, %r18, %r2;
	@%p5 bra 	BB0_2;

BB0_5:
	cvta.to.global.u64 	%rd20, %rd7;
	atom.global.max.u32 	%r15, [%rd20], %r20;
	shl.b64 	%rd21, %rd3, 2;
	add.s64 	%rd22, %rd2, %rd21;
	st.volatile.global.u32 	[%rd22], %r20;
	add.s64 	%rd23, %rd1, %rd3;
	mov.u16 	%rs2, 1;
	st.volatile.global.u8 	[%rd23], %rs2;
	add.s32 	%r16, %r9, -1;
	setp.ne.s32	%p6, %r1, %r16;
	@%p6 bra 	BB0_7;

	mov.u32 	%r17, 0;
	st.global.u32 	[row_idx], %r17;

BB0_7:
	ret;
}

	// .globl	analysis_upper
.visible .entry analysis_upper(
	.param .u32 analysis_upper_param_0,
	.param .u64 analysis_upper_param_1,
	.param .u64 analysis_upper_param_2,
	.param .u64 analysis_upper_param_3,
	.param .u64 analysis_upper_param_4,
	.param .u64 analysis_upper_param_5
)
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<24>;


	ld.param.u32 	%r10, [analysis_upper_param_0];
	ld.param.u64 	%rd7, [analysis_upper_param_1];
	ld.param.u64 	%rd10, [analysis_upper_param_2];
	ld.param.u64 	%rd11, [analysis_upper_param_3];
	ld.param.u64 	%rd8, [analysis_upper_param_4];
	ld.param.u64 	%rd9, [analysis_upper_param_5];
	cvta.to.global.u64 	%rd1, %rd10;
	cvta.to.global.u64 	%rd2, %rd11;
	mov.u64 	%rd12, row_idx;
	atom.global.add.u32 	%r1, [%rd12], 1;
	add.s32 	%r11, %r10, -1;
	sub.s32 	%r2, %r11, %r1;
	setp.lt.s32	%p1, %r2, 0;
	@%p1 bra 	BB1_7;

	cvt.s64.s32	%rd3, %r2;
	cvta.to.global.u64 	%rd13, %rd8;
	mul.wide.s32 	%rd14, %r2, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r14, [%rd15+4];
	add.s32 	%r20, %r14, -1;
	ld.global.u32 	%r4, [%rd15];
	cvta.to.global.u64 	%rd4, %rd9;
	mov.u32 	%r22, 0;
	setp.le.u32	%p2, %r20, %r4;
	@%p2 bra 	BB1_5;

BB1_2:
	mul.wide.u32 	%rd16, %r20, 4;
	add.s64 	%rd17, %rd4, %rd16;
	ld.global.u32 	%rd5, [%rd17];
	add.s64 	%rd6, %rd1, %rd5;

BB1_3:
	ld.volatile.global.u8 	%rs1, [%rd6];
	setp.eq.s16	%p3, %rs1, 0;
	@%p3 bra 	BB1_3;

	shl.b64 	%rd18, %rd5, 2;
	add.s64 	%rd19, %rd2, %rd18;
	ld.volatile.global.u32 	%r15, [%rd19];
	setp.gt.u32	%p4, %r22, %r15;
	add.s32 	%r16, %r15, 1;
	selp.b32	%r22, %r22, %r16, %p4;
	add.s32 	%r20, %r20, -1;
	setp.gt.u32	%p5, %r20, %r4;
	@%p5 bra 	BB1_2;

BB1_5:
	cvta.to.global.u64 	%rd20, %rd7;
	atom.global.max.u32 	%r17, [%rd20], %r22;
	shl.b64 	%rd21, %rd3, 2;
	add.s64 	%rd22, %rd2, %rd21;
	st.volatile.global.u32 	[%rd22], %r22;
	add.s64 	%rd23, %rd1, %rd3;
	mov.u16 	%rs2, 1;
	st.volatile.global.u8 	[%rd23], %rs2;
	setp.ne.s32	%p6, %r11, %r1;
	@%p6 bra 	BB1_7;

	mov.u32 	%r19, 0;
	st.global.u32 	[row_idx], %r19;

BB1_7:
	ret;
}

	// .globl	solve_lower_float
.visible .entry solve_lower_float(
	.param .u32 solve_lower_float_param_0,
	.param .u64 solve_lower_float_param_1,
	.param .u64 solve_lower_float_param_2,
	.param .u64 solve_lower_float_param_3,
	.param .u64 solve_lower_float_param_4,
	.param .u64 solve_lower_float_param_5,
	.param .u64 solve_lower_float_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<39>;


	ld.param.u32 	%r8, [solve_lower_float_param_0];
	ld.param.u64 	%rd5, [solve_lower_float_param_1];
	ld.param.u64 	%rd6, [solve_lower_float_param_2];
	ld.param.u64 	%rd7, [solve_lower_float_param_3];
	ld.param.u64 	%rd8, [solve_lower_float_param_4];
	ld.param.u64 	%rd10, [solve_lower_float_param_5];
	ld.param.u64 	%rd9, [solve_lower_float_param_6];
	cvta.to.global.u64 	%rd1, %rd10;
	mov.u64 	%rd11, stack_id;
	atom.global.add.u32 	%r1, [%rd11], 1;
	setp.ge.u32	%p1, %r1, %r8;
	@%p1 bra 	BB2_7;

	cvta.to.global.u64 	%rd12, %rd7;
	cvta.to.global.u64 	%rd13, %rd5;
	mul.wide.s32 	%rd14, %r1, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r2, [%rd15];
	mul.wide.u32 	%rd16, %r2, 4;
	add.s64 	%rd17, %rd12, %rd16;
	add.s32 	%r9, %r2, 1;
	mul.wide.u32 	%rd18, %r9, 4;
	add.s64 	%rd19, %rd12, %rd18;
	ld.global.u32 	%r10, [%rd19];
	add.s32 	%r3, %r10, -1;
	mul.wide.u32 	%rd20, %r3, 4;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.f32 	%f1, [%rd21];
	cvta.to.global.u64 	%rd22, %rd9;
	add.s64 	%rd23, %rd22, %rd16;
	ld.volatile.global.f32 	%f11, [%rd23];
	ld.global.u32 	%r14, [%rd17];
	cvta.to.global.u64 	%rd2, %rd8;
	setp.ge.u32	%p2, %r14, %r3;
	@%p2 bra 	BB2_5;

BB2_2:
	cvt.u64.u32	%rd3, %r14;
	mul.wide.u32 	%rd24, %r14, 4;
	add.s64 	%rd25, %rd2, %rd24;
	ld.global.u32 	%r6, [%rd25];
	cvt.u64.u32	%rd26, %r6;
	cvta.to.global.u64 	%rd27, %rd6;
	add.s64 	%rd4, %rd27, %rd26;

BB2_3:
	ld.volatile.global.u8 	%rs1, [%rd4];
	setp.eq.s16	%p3, %rs1, 0;
	@%p3 bra 	BB2_3;

	cvt.u32.u64	%r11, %rd3;
	mul.wide.u32 	%rd29, %r6, 4;
	add.s64 	%rd30, %rd22, %rd29;
	ld.volatile.global.f32 	%f6, [%rd30];
	shl.b64 	%rd31, %rd3, 2;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.f32 	%f7, [%rd32];
	mul.f32 	%f8, %f7, %f6;
	sub.f32 	%f11, %f11, %f8;
	add.s32 	%r14, %r11, 1;
	setp.lt.u32	%p4, %r14, %r3;
	@%p4 bra 	BB2_2;

BB2_5:
	cvt.u64.u32	%rd33, %r2;
	div.rn.f32 	%f9, %f11, %f1;
	st.volatile.global.f32 	[%rd23], %f9;
	cvta.to.global.u64 	%rd37, %rd6;
	add.s64 	%rd38, %rd37, %rd33;
	mov.u16 	%rs2, 1;
	st.volatile.global.u8 	[%rd38], %rs2;
	add.s32 	%r12, %r8, -1;
	setp.ne.s32	%p5, %r1, %r12;
	@%p5 bra 	BB2_7;

	mov.u32 	%r13, 0;
	st.global.u32 	[stack_id], %r13;

BB2_7:
	ret;
}

	// .globl	solve_lower_double
.visible .entry solve_lower_double(
	.param .u32 solve_lower_double_param_0,
	.param .u64 solve_lower_double_param_1,
	.param .u64 solve_lower_double_param_2,
	.param .u64 solve_lower_double_param_3,
	.param .u64 solve_lower_double_param_4,
	.param .u64 solve_lower_double_param_5,
	.param .u64 solve_lower_double_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<15>;
	.reg .f64 	%fd<12>;
	.reg .b64 	%rd<40>;


	ld.param.u32 	%r8, [solve_lower_double_param_0];
	ld.param.u64 	%rd5, [solve_lower_double_param_1];
	ld.param.u64 	%rd6, [solve_lower_double_param_2];
	ld.param.u64 	%rd7, [solve_lower_double_param_3];
	ld.param.u64 	%rd8, [solve_lower_double_param_4];
	ld.param.u64 	%rd10, [solve_lower_double_param_5];
	ld.param.u64 	%rd9, [solve_lower_double_param_6];
	cvta.to.global.u64 	%rd1, %rd10;
	mov.u64 	%rd11, stack_id;
	atom.global.add.u32 	%r1, [%rd11], 1;
	setp.ge.u32	%p1, %r1, %r8;
	@%p1 bra 	BB3_7;

	cvta.to.global.u64 	%rd12, %rd7;
	cvta.to.global.u64 	%rd13, %rd5;
	mul.wide.s32 	%rd14, %r1, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r2, [%rd15];
	mul.wide.u32 	%rd16, %r2, 4;
	add.s64 	%rd17, %rd12, %rd16;
	add.s32 	%r9, %r2, 1;
	mul.wide.u32 	%rd18, %r9, 4;
	add.s64 	%rd19, %rd12, %rd18;
	ld.global.u32 	%r10, [%rd19];
	add.s32 	%r3, %r10, -1;
	mul.wide.u32 	%rd20, %r3, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.f64 	%fd1, [%rd21];
	cvta.to.global.u64 	%rd22, %rd9;
	mul.wide.u32 	%rd23, %r2, 8;
	add.s64 	%rd24, %rd22, %rd23;
	ld.volatile.global.f64 	%fd11, [%rd24];
	ld.global.u32 	%r14, [%rd17];
	cvta.to.global.u64 	%rd2, %rd8;
	setp.ge.u32	%p2, %r14, %r3;
	@%p2 bra 	BB3_5;

BB3_2:
	cvt.u64.u32	%rd3, %r14;
	mul.wide.u32 	%rd25, %r14, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r6, [%rd26];
	cvt.u64.u32	%rd27, %r6;
	cvta.to.global.u64 	%rd28, %rd6;
	add.s64 	%rd4, %rd28, %rd27;

BB3_3:
	ld.volatile.global.u8 	%rs1, [%rd4];
	setp.eq.s16	%p3, %rs1, 0;
	@%p3 bra 	BB3_3;

	cvt.u32.u64	%r11, %rd3;
	mul.wide.u32 	%rd30, %r6, 8;
	add.s64 	%rd31, %rd22, %rd30;
	ld.volatile.global.f64 	%fd6, [%rd31];
	shl.b64 	%rd32, %rd3, 3;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.f64 	%fd7, [%rd33];
	mul.f64 	%fd8, %fd7, %fd6;
	sub.f64 	%fd11, %fd11, %fd8;
	add.s32 	%r14, %r11, 1;
	setp.lt.u32	%p4, %r14, %r3;
	@%p4 bra 	BB3_2;

BB3_5:
	cvt.u64.u32	%rd34, %r2;
	div.rn.f64 	%fd9, %fd11, %fd1;
	st.volatile.global.f64 	[%rd24], %fd9;
	cvta.to.global.u64 	%rd38, %rd6;
	add.s64 	%rd39, %rd38, %rd34;
	mov.u16 	%rs2, 1;
	st.volatile.global.u8 	[%rd39], %rs2;
	add.s32 	%r12, %r8, -1;
	setp.ne.s32	%p5, %r1, %r12;
	@%p5 bra 	BB3_7;

	mov.u32 	%r13, 0;
	st.global.u32 	[stack_id], %r13;

BB3_7:
	ret;
}

	// .globl	solve_upper_float
.visible .entry solve_upper_float(
	.param .u32 solve_upper_float_param_0,
	.param .u64 solve_upper_float_param_1,
	.param .u64 solve_upper_float_param_2,
	.param .u64 solve_upper_float_param_3,
	.param .u64 solve_upper_float_param_4,
	.param .u64 solve_upper_float_param_5,
	.param .u64 solve_upper_float_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<3>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<39>;


	ld.param.u32 	%r8, [solve_upper_float_param_0];
	ld.param.u64 	%rd5, [solve_upper_float_param_1];
	ld.param.u64 	%rd6, [solve_upper_float_param_2];
	ld.param.u64 	%rd7, [solve_upper_float_param_3];
	ld.param.u64 	%rd8, [solve_upper_float_param_4];
	ld.param.u64 	%rd10, [solve_upper_float_param_5];
	ld.param.u64 	%rd9, [solve_upper_float_param_6];
	cvta.to.global.u64 	%rd1, %rd10;
	mov.u64 	%rd11, stack_id;
	atom.global.add.u32 	%r1, [%rd11], 1;
	setp.ge.u32	%p1, %r1, %r8;
	@%p1 bra 	BB4_7;

	cvta.to.global.u64 	%rd12, %rd7;
	cvta.to.global.u64 	%rd13, %rd5;
	mul.wide.s32 	%rd14, %r1, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r2, [%rd15];
	mul.wide.u32 	%rd16, %r2, 4;
	add.s64 	%rd17, %rd12, %rd16;
	add.s32 	%r9, %r2, 1;
	mul.wide.u32 	%rd18, %r9, 4;
	add.s64 	%rd19, %rd12, %rd18;
	ld.global.u32 	%r3, [%rd17];
	mul.wide.u32 	%rd20, %r3, 4;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.f32 	%f1, [%rd21];
	cvta.to.global.u64 	%rd22, %rd9;
	add.s64 	%rd23, %rd22, %rd16;
	ld.volatile.global.f32 	%f11, [%rd23];
	ld.global.u32 	%r10, [%rd19];
	add.s32 	%r14, %r10, -1;
	cvta.to.global.u64 	%rd2, %rd8;
	setp.le.u32	%p2, %r14, %r3;
	@%p2 bra 	BB4_5;

BB4_2:
	cvt.u64.u32	%rd3, %r14;
	mul.wide.u32 	%rd24, %r14, 4;
	add.s64 	%rd25, %rd2, %rd24;
	ld.global.u32 	%r6, [%rd25];
	cvt.u64.u32	%rd26, %r6;
	cvta.to.global.u64 	%rd27, %rd6;
	add.s64 	%rd4, %rd27, %rd26;

BB4_3:
	ld.volatile.global.u8 	%rs1, [%rd4];
	setp.eq.s16	%p3, %rs1, 0;
	@%p3 bra 	BB4_3;

	cvt.u32.u64	%r11, %rd3;
	mul.wide.u32 	%rd29, %r6, 4;
	add.s64 	%rd30, %rd22, %rd29;
	ld.volatile.global.f32 	%f6, [%rd30];
	shl.b64 	%rd31, %rd3, 2;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.f32 	%f7, [%rd32];
	mul.f32 	%f8, %f7, %f6;
	sub.f32 	%f11, %f11, %f8;
	add.s32 	%r14, %r11, -1;
	setp.gt.u32	%p4, %r14, %r3;
	@%p4 bra 	BB4_2;

BB4_5:
	cvt.u64.u32	%rd33, %r2;
	div.rn.f32 	%f9, %f11, %f1;
	st.volatile.global.f32 	[%rd23], %f9;
	cvta.to.global.u64 	%rd37, %rd6;
	add.s64 	%rd38, %rd37, %rd33;
	mov.u16 	%rs2, 1;
	st.volatile.global.u8 	[%rd38], %rs2;
	add.s32 	%r12, %r8, -1;
	setp.ne.s32	%p5, %r1, %r12;
	@%p5 bra 	BB4_7;

	mov.u32 	%r13, 0;
	st.global.u32 	[stack_id], %r13;

BB4_7:
	ret;
}

	// .globl	solve_upper_double
.visible .entry solve_upper_double(
	.param .u32 solve_upper_double_param_0,
	.param .u64 solve_upper_double_param_1,
	.param .u64 solve_upper_double_param_2,
	.param .u64 solve_upper_double_param_3,
	.param .u64 solve_upper_double_param_4,
	.param .u64 solve_upper_double_param_5,
	.param .u64 solve_upper_double_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<15>;
	.reg .f64 	%fd<12>;
	.reg .b64 	%rd<40>;


	ld.param.u32 	%r8, [solve_upper_double_param_0];
	ld.param.u64 	%rd5, [solve_upper_double_param_1];
	ld.param.u64 	%rd6, [solve_upper_double_param_2];
	ld.param.u64 	%rd7, [solve_upper_double_param_3];
	ld.param.u64 	%rd8, [solve_upper_double_param_4];
	ld.param.u64 	%rd10, [solve_upper_double_param_5];
	ld.param.u64 	%rd9, [solve_upper_double_param_6];
	cvta.to.global.u64 	%rd1, %rd10;
	mov.u64 	%rd11, stack_id;
	atom.global.add.u32 	%r1, [%rd11], 1;
	setp.ge.u32	%p1, %r1, %r8;
	@%p1 bra 	BB5_7;

	cvta.to.global.u64 	%rd12, %rd7;
	cvta.to.global.u64 	%rd13, %rd5;
	mul.wide.s32 	%rd14, %r1, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.u32 	%r2, [%rd15];
	mul.wide.u32 	%rd16, %r2, 4;
	add.s64 	%rd17, %rd12, %rd16;
	add.s32 	%r9, %r2, 1;
	mul.wide.u32 	%rd18, %r9, 4;
	add.s64 	%rd19, %rd12, %rd18;
	ld.global.u32 	%r3, [%rd17];
	mul.wide.u32 	%rd20, %r3, 8;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.f64 	%fd1, [%rd21];
	cvta.to.global.u64 	%rd22, %rd9;
	mul.wide.u32 	%rd23, %r2, 8;
	add.s64 	%rd24, %rd22, %rd23;
	ld.volatile.global.f64 	%fd11, [%rd24];
	ld.global.u32 	%r10, [%rd19];
	add.s32 	%r14, %r10, -1;
	cvta.to.global.u64 	%rd2, %rd8;
	setp.le.u32	%p2, %r14, %r3;
	@%p2 bra 	BB5_5;

BB5_2:
	cvt.u64.u32	%rd3, %r14;
	mul.wide.u32 	%rd25, %r14, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r6, [%rd26];
	cvt.u64.u32	%rd27, %r6;
	cvta.to.global.u64 	%rd28, %rd6;
	add.s64 	%rd4, %rd28, %rd27;

BB5_3:
	ld.volatile.global.u8 	%rs1, [%rd4];
	setp.eq.s16	%p3, %rs1, 0;
	@%p3 bra 	BB5_3;

	cvt.u32.u64	%r11, %rd3;
	mul.wide.u32 	%rd30, %r6, 8;
	add.s64 	%rd31, %rd22, %rd30;
	ld.volatile.global.f64 	%fd6, [%rd31];
	shl.b64 	%rd32, %rd3, 3;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.f64 	%fd7, [%rd33];
	mul.f64 	%fd8, %fd7, %fd6;
	sub.f64 	%fd11, %fd11, %fd8;
	add.s32 	%r14, %r11, -1;
	setp.gt.u32	%p4, %r14, %r3;
	@%p4 bra 	BB5_2;

BB5_5:
	cvt.u64.u32	%rd34, %r2;
	div.rn.f64 	%fd9, %fd11, %fd1;
	st.volatile.global.f64 	[%rd24], %fd9;
	cvta.to.global.u64 	%rd38, %rd6;
	add.s64 	%rd39, %rd38, %rd34;
	mov.u16 	%rs2, 1;
	st.volatile.global.u8 	[%rd39], %rs2;
	add.s32 	%r12, %r8, -1;
	setp.ne.s32	%p5, %r1, %r12;
	@%p5 bra 	BB5_7;

	mov.u32 	%r13, 0;
	st.global.u32 	[stack_id], %r13;

BB5_7:
	ret;
}


